<?xml version="1.0" encoding="utf-8"?>
<Window
    x:Class="ViewAppxPackage.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:ViewAppxPackage"
    x:DefaultBindMode="OneWay" >

    <!-- Disable the whole window if an overlay is showing -->
    <UserControl  
                 IsEnabled="{x:Bind local:Utils.NotAny(_progressOverlay.IsOpen, IsLoading)}">
        <UserControl.Resources>
            <!-- This is a hack to get a property from the code behind into a Binding -->
            <local:XClassMapper x:Name="_xClassMapper"/>
        </UserControl.Resources>

        <Grid ColumnDefinitions="*" RowDefinitions="*"
              KeyboardAcceleratorPlacementMode="Hidden" >
            <Grid.KeyboardAccelerators>
                <!-- The placement mode is 'hidden' because otherwise these cause constant tool tips -->
                <!-- bugbug: override this on the CommandBar? -->
                <KeyboardAccelerator Modifiers="Control" Key="F" Invoked="GoToFilter"/>
                <KeyboardAccelerator Modifiers="Control" Key="E" Invoked="GoToSearch"/>
                <KeyboardAccelerator Modifiers="Control,Shift" Key="G" Invoked="ShowDebugLog" />
            </Grid.KeyboardAccelerators>

            <!-- Two columns for the list and the detail -->
            <!-- Three rows for the CommandBar, search/filter boxes, and content -->
            <!-- The package view detail is column 1 and spans rows 2/3 -->
            <Grid x:Name="_root" 
                  ColumnDefinitions="Auto,*" 
                  RowDefinitions="Auto,Auto,*" 
                  ColumnSpacing="20">

                <!-- DefaultLabelPosition is set to 'Right' because that's the only way to keep the label visible -->
                <CommandBar x:Name="_commandBar"
                    Grid.Row="0"
                    Grid.Column="0"
                    HorizontalAlignment="Left"
                    Grid.ColumnSpan="2"
                    DefaultLabelPosition="Right"
                    Margin="0,10,0,10">

                    <AppBarButton Icon="Help" Label="Help" Click="ShowHelpClick"/>

                    <AppBarSeparator/>

                    <!-- This might do a launch (single aumid case) or show a menu (multi aumid case) -->
                    <AppBarButton x:Name="_launchButton" 
                                  Icon="Play" Label="Launch"
                                  IsEnabled="{x:Bind CanLaunch(CatalogModel.CurrentItem)}"
                                  Click="LaunchPackage2">
                    </AppBarButton>

                    <AppBarButton Click="{x:Bind OpenStore}" Icon="Shop" 
                          Label="Open in Store" 
                          IsEnabled="{x:Bind CanOpenStore(IsMultiSelect)}"/>

                    <AppBarButton Click="{x:Bind OpenManifest}" Icon="Document" Label="Manifest"
                          IsEnabled="{x:Bind CanOpenManifest(IsMultiSelect)}"/>

                    <AppBarSeparator/>

                    <AppBarButton Click="RemovePackage" Icon="Delete" Label="Remove" />

                    <AppBarButton Click="AddPackage" Icon="Add" Label="Add"
                                  ToolTipService.ToolTip="Add a package (must be signed with a trusted certificate)"/>

                    <AppBarButton Click="RegisterPackage" Label="Sideload" Icon="NewFolder">
                        <ToolTipService.ToolTip>
                            <local:ComplexToolTip
                                Title="Developer sideload"
                                Subtitle="Add a package that's unsigned, and either an appx/msix or an AppxManifest.xml file in a deployment directory. Requires that Developer Mode be enabled" />
                        </ToolTipService.ToolTip>
                    </AppBarButton>

                    <AppBarSeparator/>

                    <AppBarButton Label="MSIX Log" Click="ShowAppxLog" >
                        <AppBarButton.Icon>
                            <FontIcon Glyph="&#xE7C3;" FontFamily="Segoe MDL2 Assets" FontSize="48"/>
                        </AppBarButton.Icon>
                    </AppBarButton>

                    <AppBarToggleButton Label="All users"
                                        Icon="OtherUser"
                                    IsChecked="{x:Bind IsAllUsers, Mode=OneWay}"
                                        Click="{x:Bind ToggleAllUsers}"
                                    ToolTipService.ToolTip="Enable/disable All Users. When disabled, only current user packages are shown. Requires this app to be run elevated."/>

                    <AppBarButton Label="PowerShell" Click="RunPowershellAsPackage"
                                  IsEnabled="{x:Bind CanLaunch(CatalogModel.CurrentItem)}" >
                        <AppBarButton.Icon>
                            <FontIcon FontFamily="Segoe Fluent Icons" Glyph="&#xe756;"/>
                        </AppBarButton.Icon>

                        <ToolTipService.ToolTip>
                            <local:ComplexToolTip
                                Title="Run PowerShell as package"
                                Subtitle="This opens a new PowerShell window that's running with package identity. See help for more info." />
                        </ToolTipService.ToolTip>
                    </AppBarButton>

                    <!--<AppBarButton Label="Test" Click="AppBarButton_Click"/>-->

                </CommandBar>

                <!-- Search and Filter text boxes -->
                <StackPanel Grid.Row="1">

                    <!-- Search and Find text boxes-->
                    <!-- Limited to that they don't get wider than the ListView -->
                    <StackPanel MaxWidth="{x:Bind MaxListWidth, Mode=OneWay}">
                        <TextBox x:Name="_searchBox"
                             Text="{x:Bind CatalogModel.SearchText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                             IsSpellCheckEnabled="False"
                             IsEnabled="{x:Bind IsSearchEnabled}"
                             Padding="10"
                             HorizontalAlignment="Stretch"
                             PlaceholderText="{x:Bind SearchPlaceholderText(IsSearchEnabled)}" />

                        <TextBox x:Name="_filterBox"
                             Text="{x:Bind CatalogModel.Filter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                             IsSpellCheckEnabled="False"
                             HorizontalAlignment="Stretch"
                             PlaceholderText="{x:Bind FilterPlaceholderText}" />
                    </StackPanel>

                    <!-- Message showing the package count, next to a sort button -->
                    <Grid x:Name="_workaroundGrid"
                          ColumnDefinitions="*,Auto" 
                          HorizontalAlignment="Stretch"
                          BorderBrush="{StaticResource SystemAccentColor}"
                          BorderThickness="0,0,0,1"
                          Padding="0,0,0,4">

                        <!-- bugbug: had to eyeball the margin to get things to line up OK -->
                        <TextBlock VerticalAlignment="Center" Margin="8,0,0,0" FontStyle="Italic">
                            (<Run Text="{x:Bind CatalogModel.PackageCount}" 
                                 /> package<Run Text="{x:Bind local:Utils.PluralS(CatalogModel.PackageCount)}"/>)
                        </TextBlock>

                        <DropDownButton Grid.Column="1" Margin="5,0,0,0"
                                        ToolTipService.ToolTip="Sort packages by name or by installed date">
                            <StackPanel Orientation="Horizontal" Spacing="5">
                                <SymbolIcon>Sort</SymbolIcon>
                                <TextBlock Text="{x:Bind CatalogModel.SortLabel}"/>
                            </StackPanel>
                            <DropDownButton.Flyout>
                                <MenuFlyout>
                                    <ToggleMenuFlyoutItem Text="A-Z"            IsChecked="{x:Bind CatalogModel.SortByName, Mode=TwoWay}"/>
                                    <ToggleMenuFlyoutItem Text="Installed date" IsChecked="{x:Bind CatalogModel.SortByDate, Mode=TwoWay}"/>
                                </MenuFlyout>
                            </DropDownButton.Flyout>
                        </DropDownButton>
                    </Grid>
                </StackPanel>

                <!-- List of packages. Transparent to make Mica work -->
                <!-- The ListSizeChanged handler is to make this list wide enough for the longest package name -->
                <Grid Grid.Row="2" RowDefinitions="*,Auto" Margin="0,4,0,0">
                    <TextBlock Visibility="{x:Bind local:Utils.IsVisibleIf(NoPackagesFound)}" >No packages found</TextBlock>

                    <!-- OneWay binding on SelectedItem rather than TwoWay, with code instead in SelectionChanged -->
                    <!-- MinWidth is set to be the widest ActualWidth, done by tracking SizeChanged,
                         so that the width doesn't oscillate as you scroll -->
                    <ListView x:Name="_lv" 
                          SizeChanged="List2SizeChanged"
                          Background="Transparent"
                          ItemsSource="{x:Bind CatalogModel.Packages, Mode=OneWay}"
                          SelectedItem="{x:Bind CatalogModel.CurrentItem, Mode=OneWay}"
                          SelectionChanged="SelectionChanged"
                          SelectionMode="Extended"
                          MinWidth="{x:Bind MaxListWidth, Mode=OneWay}">
                        <ListView.ItemTemplate>
                            <DataTemplate x:DataType="local:PackageModel">
                                <!-- First column is a logo, second column is several properties -->
                                <!-- 36px and 22px match Settings app Installed Apps list -->
                                <Grid ColumnDefinitions="36,*" ColumnSpacing="22">
                                    <Image Stretch="Uniform" >
                                        <Image.Source>
                                            <BitmapImage UriSource="{x:Bind Preload.Logo}" />
                                        </Image.Source>
                                    </Image>

                                    <StackPanel Grid.Column="1" Margin="0,6,0,6" Padding="0,2,0,2">

                                        <!-- Row with package name -->
                                        <!-- The max ActualWidth of this TextBlock becomes the MaxWidth
                                         of the row below. This is done using SizeChanged to track ActualWidth -->
                                        <!-- The "Preload" property is optimized to only calculate the few properties
                                         we need for this item template -->
                                        <TextBlock Text="{x:Bind Preload.Name}"
                                               Style="{ThemeResource BodyTextBlockStyle}"
                                               SizeChanged="NameSizeChanged"
                                               FontWeight="{x:Bind BoldIfNew}"/>

                                        <!-- Row with display name and install date -->
                                        <!-- Width is constrained to be no wider than the above unconstrained TextBlock -->
                                        <!-- x:Bind in a DataTemplate still has a limitation that it can't reference the code behind.
                                         So use a {Binding} to a Static Resource to get the MaxNameWidth property -->
                                        <Grid ColumnDefinitions="*,Auto" Opacity="0.6"
                                          Margin="0,3,0,0"
                                          MaxWidth="{Binding XClass.MaxNameWidth, Source={StaticResource _xClassMapper}, Mode=OneWay}" >

                                            <TextBlock Text="{x:Bind Preload.DisplayName}" 
                                                   Style="{ThemeResource CaptionTextBlockStyle}" 
                                                   TextWrapping="NoWrap"
                                                   TextTrimming="CharacterEllipsis" />
                                            <TextBlock Grid.Column="1"
                                                   Margin="5,0,0,0"
                                                   Text="{x:Bind local:Utils.FormatDateOrTime(Preload.InstalledDate)}" 
                                                   Style="{ThemeResource CaptionTextBlockStyle}" />
                                        </Grid>
                                    </StackPanel>
                                </Grid>
                            </DataTemplate>
                        </ListView.ItemTemplate>
                    </ListView>

                </Grid>

                <TextBlock Grid.Row="1" Grid.RowSpan="2" Grid.Column="1"
                           HorizontalAlignment="Center"
                           Visibility="{x:Bind local:Utils.IsVisibleIf(NoPackagesFound)}"
                           VerticalAlignment="Center">Nothing to see here, select a package</TextBlock>

                <!-- Detail view. Note that this spans two rows -->
                <local:PackageView x:Name="_detail"
                                   Grid.Row="1" Grid.RowSpan="2"
                                   Grid.Column="1" 
                                   Package="{x:Bind local:PackageCatalogModel.Instance.CurrentItem, Mode=OneWay}"/>

            </Grid>


            <!-- This overlay sits over the whole window and shows up when an async but blocking operation is happening -->
            <local:ProgressOverlay x:Name="_progressOverlay"
                                   IsOpen="{x:Bind local:Utils.IsntEmpty(BusyMessage), Mode=OneWay}">

                <StackPanel Spacing="20">

                    <TextBlock Text="{x:Bind BusyMessage, Mode=OneWay}" />
                    <ProgressBar  Minimum="0"
                                  Maximum="100"
                                  Value="{x:Bind ProgressPercentage}"/>

                </StackPanel>
            </local:ProgressOverlay>
        </Grid>
    </UserControl>
</Window>
