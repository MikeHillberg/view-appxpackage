<?xml version="1.0" encoding="utf-8"?>
<Window
    x:Class="ViewAppxPackage.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:ViewAppxPackage"
    x:DefaultBindMode="OneWay" >

    <!-- Disable the whole window if an overlay is showing -->
    <UserControl IsEnabled="{x:Bind local:Utils.NotAny(_progressOverlay.IsOpen, IsLoading)}">
        
        <Grid ColumnDefinitions="*" RowDefinitions="*"
              KeyboardAcceleratorPlacementMode="Hidden" >
            <Grid.KeyboardAccelerators>
                <!-- The placement mode is 'hidden' because otherwise these cause constant tool tips -->
                <!-- bugbug: override this on the CommandBar? -->
                <KeyboardAccelerator Modifiers="Control" Key="F" Invoked="GoToFilter"/>
                <KeyboardAccelerator Modifiers="Control" Key="E" Invoked="GoToSearch"/>
            </Grid.KeyboardAccelerators>

            <!-- Two columns for the list and the detail -->
            <!-- Three rows for the CommandBar, search/filter boxes, and content -->
            <!-- The package view detail is column 1 and spans rows 2/3 -->
            <Grid x:Name="_root" 
                  ColumnDefinitions="Auto,*" 
                  RowDefinitions="Auto,Auto,*" 
                  ColumnSpacing="20">

                <CommandBar Grid.Row="0"
                    Grid.Column="0"
                    HorizontalAlignment="Left"
                    Grid.ColumnSpan="2"
                    DefaultLabelPosition="Right"
                    Margin="0,10,0,10">

                    <AppBarButton Click="LaunchPackage" Icon="Play" Label="Launch"
                          IsEnabled="{x:Bind CanLaunch(IsMultiSelect)}"/>

                    <AppBarButton Click="{x:Bind OpenStore}" Icon="Shop" 
                          Label="Open in Store" 
                          IsEnabled="{x:Bind CanOpenStore(IsMultiSelect)}"/>

                    <AppBarButton Click="{x:Bind OpenManifest}" Icon="Document" Label="Open Manifest"
                          IsEnabled="{x:Bind CanOpenManifest(IsMultiSelect)}"/>

                    <AppBarSeparator/>

                    <AppBarButton Click="RemovePackage" Icon="Delete" Label="Remove" />

                    <AppBarButton Click="AddPackage" Icon="Add" Label="Add"
                                  ToolTipService.ToolTip="Add a package (must be signed with a trusted certificate)"/>

                    <AppBarButton Click="RegisterPackage" Label="Register">
                        <AppBarButton.Icon>
                            <!-- Registered trademark symbol is the best icon I can think of so far for "register" -->
                            <FontIcon FontFamily="Segoe UI Symbol" Glyph="&#x00AE;" />
                        </AppBarButton.Icon>
                        <ToolTipService.ToolTip>
                            <local:ComplexToolTip
                                Title="Register unsigned package"
                                Subtitle="Add a package that's unsigned, and either an appx/msix or just a directory. Requires that Developer Mode be enabled" />
                        </ToolTipService.ToolTip>
                    </AppBarButton>

                    <AppBarSeparator/>
                    
                    <AppBarToggleButton Label="All users"
                                    IsChecked="{x:Bind IsAllUsers, Mode=TwoWay}"
                                    Visibility="{x:Bind local:Utils.IsVisible(local:MainWindow.Instance.IsElevated)}" 
                                    ToolTipService.ToolTip="Enable/disable All Users. When disabled, only current user packages are shown. This button only appears when the app is run elevated."/>

                    <AppBarButton Icon="Help" Label="Help" Click="ShowHelpClick"/>

                </CommandBar>

                <!-- Search and Filter text boxes -->
                <StackPanel Grid.Row="1">

                    <TextBox x:Name="_searchBox"
                             IsEnabled="{x:Bind IsSearchEnabled}"
                             Padding="10"
                             HorizontalAlignment="Stretch"
                             PlaceholderText="{x:Bind SearchPlaceholderText(IsSearchEnabled)}"
                             Text="{x:Bind SearchText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                    <TextBox x:Name="_filterBox"
                             Grid.Row="1"
                             Padding="10"
                             HorizontalAlignment="Stretch"
                             PlaceholderText="{x:Bind FilterPlaceholderText}" 
                             Text="{x:Bind Filter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                </StackPanel>

                <!-- List of packages. Transparent to make Mica work -->
                <!-- The ListSizeChanged handler is to make this list wide enough for the longest package name -->
                <Grid Grid.Row="2">
                    <TextBlock Visibility="{x:Bind local:Utils.IsVisible(NoPackagesFound)}" >No packages found</TextBlock>
                    
                    <ListView x:Name="_lv" 
                          Background="Transparent"
                          ItemsSource="{x:Bind Packages, Mode=OneWay}"
                          SelectedItem="{x:Bind local:MainWindow.Instance.CurrentItem, Mode=TwoWay}"
                          SelectionChanged="SelectionChanged"
                          SizeChanged="ListSizeChanged"
                          SelectionMode="Extended"
                          MinWidth="{x:Bind MinListWidth, Mode=OneWay}">
                        <ListView.ItemTemplate>
                            <DataTemplate x:DataType="local:PackageModel">
                                <TextBlock Text="{x:Bind Id.Name}" />
                            </DataTemplate>
                        </ListView.ItemTemplate>
                    </ListView>
                </Grid>

                <TextBlock Grid.Row="1" Grid.RowSpan="2" Grid.Column="1"
                           HorizontalAlignment="Center"
                           VerticalAlignment="Center">Nothing to see here, select a package</TextBlock>

                <!-- Detail view. Note that this spans two rows -->
                <local:PackageView x:Name="_detail"
                                   Grid.Row="1" Grid.RowSpan="2"
                                   Grid.Column="1" 
                                   Package="{x:Bind local:MainWindow.Instance.CurrentItem, Mode=OneWay}"/>

            </Grid>


            <!-- This overlay sits over the whole window and shows up when an async but blocking operation is happening -->
            <local:ProgressOverlay x:Name="_progressOverlay"
                                   IsOpen="{x:Bind local:Utils.IsntEmpty(BusyMessage), Mode=OneWay}">

                <StackPanel Spacing="20">

                    <TextBlock Text="{x:Bind BusyMessage, Mode=OneWay}" />
                    <ProgressBar  Minimum="0"
                                  Maximum="100"
                                  Value="{x:Bind ProgressPercentage}"/>

                </StackPanel>
            </local:ProgressOverlay>
        </Grid>
    </UserControl>
</Window>
