using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Windows.ApplicationModel;
using Windows.Storage;
using Windows.System;

namespace ViewAppxPackage
{
    // This file has generated wrappers for the Package APIs.
    // (Generated by a script, not a code generator)

    // Removed Dependencies, Status, Current
    // bugbug: SourceUriSchemeName is not available in the target OS version

    public partial class PackageModel
    {
        public string EffectiveExternalPath => _effectiveExternalPath.Value(this);
        PackageProperty<string> _effectiveExternalPath = new(model => model._package.EffectiveExternalPath);

        public string EffectivePath => _effectivePath.Value(this);
        PackageProperty<string> _effectivePath = new(model => model._package.EffectivePath);

        // Deprecated
        //public DateTimeOffset InstallDate => _installDate.Value(this);
        //PackageProperty<DateTimeOffset> _installDate = new(model => model._package.InstallDate);

        public DateTimeOffset InstalledDate => _installedDate.Value(this);
        PackageProperty<DateTimeOffset> _installedDate = new(model => model._package.InstalledDate);

        public string InstalledPath => _installedPath.Value(this);
        PackageProperty<string> _installedPath = new(model => model._package.InstalledPath);

        public bool IsBundle => _isBundle.Value(this);
        PackageProperty<bool> _isBundle = new(model => model._package.IsBundle);

        public bool IsDevelopmentMode => _isDevelopmentMode.Value(this);
        PackageProperty<bool> _isDevelopmentMode = new(model => model._package.IsDevelopmentMode);

        public bool IsFramework => _isFramework.Value(this);
        PackageProperty<bool> _isFramework = new(model => model._package.IsFramework);

        public bool IsOptional => _isOptional.Value(this);
        PackageProperty<bool> _isOptional = new(model => model._package.IsOptional);

        public bool IsResourcePackage => _isResourcePackage.Value(this);
        PackageProperty<bool> _isResourcePackage = new(model => model._package.IsResourcePackage);

        public bool IsStub => _isStub.Value(this);
        PackageProperty<bool> _isStub = new(model => model._package.IsStub);

        public string MachineExternalPath => _machineExternalPath.Value(this);
        PackageProperty<string> _machineExternalPath = new(model => model._package.MachineExternalPath);

        public string MutablePath => _mutablePath.Value(this);
        PackageProperty<string> _mutablePath = new(model => model._package.MutablePath);

        public string PublisherDisplayName => _publisherDisplayName.Value(this);
        PackageProperty<string> _publisherDisplayName = new(model => model._package.PublisherDisplayName);

        public PackageSignatureKind SignatureKind => _signatureKind.Value(this);
        PackageProperty<PackageSignatureKind> _signatureKind = new(model => model._package.SignatureKind);

        public string UserExternalPath => _userExternalPath.Value(this);
        PackageProperty<string> _userExternalPath = new(model => model._package.UserExternalPath);

        public ProcessorArchitecture Architecture => _architecture.Value(this);
        PackageProperty<ProcessorArchitecture> _architecture = new(model => model._package.Id.Architecture);

        public string Author => _author.Value(this);
        PackageProperty<string> _author = new(model => model._package.Id.Author);

        public string FamilyName => _familyName.Value(this);
        PackageProperty<string> _familyName = new(model => model._package.Id.FamilyName);

        //public string FullName => _fullName.Value(_package);
        //PackageCaller2<string> _fullName = new(package => package.Id.FullName);

        PackageProperty<string> _fullName = new(model => model._package.Id.FullName);
        public string FullName => _fullName.Value(this);

        //public string Name => _name.Value(_package);
        //PackageCaller2<string> _name = new(package => package.Id.Name);

        PackageProperty<string> _name = new(model => model._package.Id.Name);
        public string Name => _name.Value(this, true);

        public string ProductId => _productId.Value(this);
        PackageProperty<string> _productId = new(model => model._package.Id.ProductId);

        public string Publisher => _publisher.Value(this);
        PackageProperty<string> _publisher = new(model => model._package.Id.Publisher);

        public string PublisherId => _publisherId.Value(this);
        PackageProperty<string> _publisherId = new(model => model._package.Id.PublisherId);

        public string ResourceId => _resourceId.Value(this);
        PackageProperty<string> _resourceId = new(model => model._package.Id.ResourceId);

        public PackageVersion Version => _version.Value(this);
        PackageProperty<PackageVersion> _version = new(model => model._package.Id.Version);
    }
}
